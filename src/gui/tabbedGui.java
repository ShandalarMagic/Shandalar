package gui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The gui that users will be able to see for the Deck Injector.
 * @author Ryan Russell
 * @since 14-Jun-2011
 */
public class tabbedGui extends javax.swing.JFrame {

    final boolean debug = false;
    boolean saveDefaultPath = false;
    final String gameDir = "C:\\"; //"E:\\Play\\Magic\\Game\\Magic\\";
    final String duelDir = "C:\\"; //"E:\\Play\\Magic\\Game\\Magic\\Playdeck\\"; 
    final String duel = ""; //"MyDeck.dck";
    final String game = ""; //"MAGIC4.SVE";
    static final String nl = System.getProperty("line.separator");
    final int deckStart = Integer.parseInt("1420", 16);
    final int healthStart = Integer.parseInt("A", 16);
    final int cardDupeStart = Integer.parseInt("1EA3C", 16);
    final int amuletsStart = Integer.parseInt("21D0C", 16);
    final int goldStart = Integer.parseInt("21D20", 16);
    final int foodStart = Integer.parseInt("21D24", 16);
    final int wmagicStart = Integer.parseInt("22110", 16);
    final int nameStart = Integer.parseInt("2A1E0", 16);
    final static allCards cardMap = new allCards();
    RandomAccessFile duelFile;
    RandomAccessFile gameFile;
    String openGameFile = gameDir + game;
    String openDuelFile = duelDir + duel;
    gameDeck gameDeck = new gameDeck();
    duelDeck duelDeck = new duelDeck();
    int selectedDeck = 0;

    /** Creates new form tabbedTest */
    public tabbedGui() {
        initComponents();
        makeThingsInvisable();
        loadSettingsFromFile();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnSaveAll = new javax.swing.JButton();
        statusBar = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        duelDeckBox = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        gameDeckBox = new javax.swing.JTextArea();
        lblDuelDeck = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        radDeck1 = new javax.swing.JRadioButton();
        radDeck2 = new javax.swing.JRadioButton();
        radDeck3 = new javax.swing.JRadioButton();
        radAllCards = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        boxWarnings = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btnInject = new javax.swing.JButton();
        btnExtract = new javax.swing.JButton();
        btnOpenDuel = new javax.swing.JButton();
        btnOpenGame = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnDuelClose = new javax.swing.JButton();
        btnGameClose = new javax.swing.JButton();
        lblDuelName = new javax.swing.JLabel();
        lblGameName = new javax.swing.JLabel();
        lblDuelCount = new javax.swing.JLabel();
        lblGameCount = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblHealth = new javax.swing.JLabel();
        txtFood = new javax.swing.JTextField();
        txtGold = new javax.swing.JTextField();
        lblFood = new javax.swing.JLabel();
        lblGold = new javax.swing.JLabel();
        lblHealth1 = new javax.swing.JLabel();
        txtHealth2 = new javax.swing.JTextField();
        txtHealth1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        chkMagic3 = new javax.swing.JCheckBox();
        chkMagic5 = new javax.swing.JCheckBox();
        chkMagic7 = new javax.swing.JCheckBox();
        chkMagic9 = new javax.swing.JCheckBox();
        chkMagic11 = new javax.swing.JCheckBox();
        chkMagic1 = new javax.swing.JCheckBox();
        chkMagic2 = new javax.swing.JCheckBox();
        chkMagic4 = new javax.swing.JCheckBox();
        chkMagic6 = new javax.swing.JCheckBox();
        chkMagic8 = new javax.swing.JCheckBox();
        chkMagic10 = new javax.swing.JCheckBox();
        chkMagic12 = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        btnSaveHero = new javax.swing.JButton();
        chkMagicAll = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtAmGreen = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAmRed = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAmBlue = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtAmBlack = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtAmWhite = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpenDuel = new javax.swing.JMenuItem();
        menuOpenGame = new javax.swing.JMenuItem();
        menuExtract = new javax.swing.JMenuItem();
        menuPrefs = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnSaveAll.setText("Save All");
        btnSaveAll.setEnabled(false);
        btnSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAllActionPerformed(evt);
            }
        });

        statusBar.setBackground(new java.awt.Color(220, 220, 220));
        statusBar.setText("Welcome to the Shandalar Deck Injector by RyanfaeScotland.");
        statusBar.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveAll)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(statusBar)
                .addComponent(btnSaveAll))
        );

        duelDeckBox.setColumns(1);
        duelDeckBox.setEditable(false);
        duelDeckBox.setRows(10);
        jScrollPane1.setViewportView(duelDeckBox);

        gameDeckBox.setColumns(1);
        gameDeckBox.setEditable(false);
        gameDeckBox.setRows(10);
        jScrollPane2.setViewportView(gameDeckBox);

        lblDuelDeck.setText("Duel Deck:");

        jLabel2.setText("Shandalar Save:");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Working Deck"));

        buttonGroup1.add(radDeck1);
        radDeck1.setText("Deck 1");
        radDeck1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDeck1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(radDeck2);
        radDeck2.setText("Deck 2");
        radDeck2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDeck2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(radDeck3);
        radDeck3.setText("Deck 3");
        radDeck3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDeck3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(radAllCards);
        radAllCards.setSelected(true);
        radAllCards.setText("All Cards");
        radAllCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radAllCardsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radDeck1)
                    .addComponent(radDeck2)
                    .addComponent(radDeck3)
                    .addComponent(radAllCards))
                .addGap(14, 14, 14))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(radDeck1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radDeck2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radDeck3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radAllCards)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        boxWarnings.setColumns(20);
        boxWarnings.setEditable(false);
        boxWarnings.setRows(5);
        jScrollPane3.setViewportView(boxWarnings);

        jLabel3.setText("Warnings:");

        btnInject.setText("Inject");
        btnInject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInjectActionPerformed(evt);
            }
        });

        btnExtract.setText("Extract");
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractActionPerformed(evt);
            }
        });

        btnOpenDuel.setText("Open Duel Deck");
        btnOpenDuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenDuelActionPerformed(evt);
            }
        });

        btnOpenGame.setText("Open Shandalar");
        btnOpenGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenGameActionPerformed(evt);
            }
        });

        jLabel4.setText("Cards:");

        jLabel5.setText("Cards:");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDuelClose.setText("Close");
        btnDuelClose.setEnabled(false);
        btnDuelClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuelCloseActionPerformed(evt);
            }
        });

        btnGameClose.setText("Close");
        btnGameClose.setEnabled(false);
        btnGameClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGameCloseActionPerformed(evt);
            }
        });

        lblDuelName.setText("None");

        lblGameName.setText("None");

        lblDuelCount.setText("0");

        lblGameCount.setText("0 / 0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDuelCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                                .addComponent(btnDuelClose))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(lblDuelDeck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDuelName))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpenGame, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(btnOpenDuel, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGameName))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGameCount, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                                .addComponent(btnGameClose))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDuelDeck)
                    .addComponent(jLabel2)
                    .addComponent(lblDuelName)
                    .addComponent(lblGameName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnOpenDuel)
                        .addGap(18, 18, 18)
                        .addComponent(btnOpenGame)
                        .addGap(18, 18, 18)
                        .addComponent(btnInject)
                        .addGap(18, 18, 18)
                        .addComponent(btnExtract)
                        .addGap(19, 19, 19)
                        .addComponent(btnClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGameClose, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnDuelClose, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblDuelCount)
                    .addComponent(lblGameCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        jTabbedPane1.addTab("Deck", jPanel2);

        lblHealth.setText("Health:");

        txtFood.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFood.setText("0");

        txtGold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtGold.setText("0");

        lblFood.setText("Food:");

        lblGold.setText("Gold:");

        lblHealth1.setText("/");

        txtHealth2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtHealth2.setText("0");
        txtHealth2.setEnabled(false);

        txtHealth1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtHealth1.setText("0");
        txtHealth1.setEnabled(false);

        jLabel6.setText("World Magics:");

        chkMagic3.setText("Conjurer's Will");

        chkMagic5.setText("Leap of Fate");

        chkMagic7.setText("Quickening");

        chkMagic9.setText("Staff of Thunder");

        chkMagic11.setText("Sword of Resistance");

        chkMagic1.setText("Sleight of Hand");

        chkMagic2.setText("Haggler's Coin");

        chkMagic4.setText("Amulet of Swampwalk");

        chkMagic6.setText("Tome of Enlightenment");
        chkMagic6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMagic6ActionPerformed(evt);
            }
        });

        chkMagic8.setText("Fruit of Sustenance");

        chkMagic10.setText("Dwarven Pick");

        chkMagic12.setText("Ring of the Guardian");

        btnSaveHero.setText("Save");
        btnSaveHero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveHeroActionPerformed(evt);
            }
        });

        chkMagicAll.setText("All");
        chkMagicAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMagicAllActionPerformed(evt);
            }
        });

        jLabel1.setText("(Sorry not working yet, maybe next version)");

        jLabel7.setText("Amulets:");

        jLabel8.setText("Green:");

        txtAmGreen.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAmGreen.setText("0");

        jLabel9.setText("Red:");

        txtAmRed.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAmRed.setText("0");

        jLabel10.setText("Blue:");

        txtAmBlue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAmBlue.setText("0");

        jLabel11.setText("Black:");

        txtAmBlack.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAmBlack.setText("0");

        jLabel12.setText("White:");

        txtAmWhite.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAmWhite.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHealth)
                                    .addComponent(lblGold))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtGold, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(txtHealth1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHealth1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtHealth2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblFood)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFood, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkMagicAll))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkMagic1)
                                    .addComponent(chkMagic2)
                                    .addComponent(chkMagic3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkMagic4)
                                    .addComponent(chkMagic6)
                                    .addComponent(chkMagic5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkMagic7)
                                    .addComponent(chkMagic9)
                                    .addComponent(chkMagic8))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkMagic11)
                                    .addComponent(chkMagic10)
                                    .addComponent(chkMagic12))
                                .addGap(53, 53, 53))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmBlack, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmGreen, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmRed, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAmWhite, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(545, Short.MAX_VALUE)
                        .addComponent(btnSaveHero, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHealth)
                    .addComponent(txtHealth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHealth1)
                    .addComponent(txtHealth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGold)
                    .addComponent(txtGold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFood)
                    .addComponent(txtFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(chkMagicAll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkMagic1)
                        .addGap(49, 49, 49))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkMagic4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMagic5)
                            .addComponent(chkMagic2))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMagic6)
                            .addComponent(chkMagic3)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkMagic7)
                        .addGap(26, 26, 26)
                        .addComponent(chkMagic9))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkMagic10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMagic11)
                            .addComponent(chkMagic8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkMagic12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11)
                    .addComponent(txtAmBlack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8)
                    .addComponent(txtAmGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtAmRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtAmWhite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(284, 284, 284)
                .addComponent(btnSaveHero)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Hero", jPanel3);

        menuFile.setText("File");

        menuOpenDuel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuOpenDuel.setText("Open Duel Deck...");
        menuOpenDuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenDuelActionPerformed(evt);
            }
        });
        menuFile.add(menuOpenDuel);

        menuOpenGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        menuOpenGame.setText("Open Shandalar Save...");
        menuOpenGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenGameActionPerformed(evt);
            }
        });
        menuFile.add(menuOpenGame);

        menuExtract.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        menuExtract.setText("Extract Deck");
        menuExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExtractActionPerformed(evt);
            }
        });
        menuFile.add(menuExtract);

        menuPrefs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuPrefs.setText("Preferences...");
        menuPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPrefsActionPerformed(evt);
            }
        });
        menuFile.add(menuPrefs);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        menuHelp.setText("Help");

        menuAbout.setText("About");
        menuAbout.setEnabled(false);
        menuHelp.add(menuAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radDeck2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDeck2ActionPerformed
try{
                selectedDeck = 2;
                if (gameDeck != null){
                gameDeckBox.setText(gameDeck.getSubDeck(2).group().toString(debug));
                gameDeckBox.setCaretPosition(0);
                lblGameCount.setText(gameDeck.getSubDeck(2).amountOfCards() + " / " + gameDeck.amountOfCards());
                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error setting display to Deck 2 in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_radDeck2ActionPerformed

    /**
     * Calls the menuOpenDuelActionPerformed method.
     * @param evt
     */
    private void btnOpenDuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenDuelActionPerformed
        menuOpenDuelActionPerformed(evt);
    }//GEN-LAST:event_btnOpenDuelActionPerformed

    /**
     * Open Duel deck
     * @param evt
     */
    private void menuOpenDuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenDuelActionPerformed
        //TODO Make it show either the select deck is shown or it resets the Rad button
        JFileChooser fileChooser = new JFileChooser();
        fileChooser = new JFileChooser(openDuelFile);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Duel deck files (.dck)", "dck");
        fileChooser.setFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(this);
        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION:
                try {
                    duelFile = new RandomAccessFile(fileChooser.getSelectedFile(), "r");
                    openDuelFile = fileChooser.getSelectedFile().getPath();
                    String[] name = openDuelFile.split("\\\\");
                    lblDuelName.setText(name[name.length - 1]);
                    duelDeckBox.setText("");
                    duelDeck = getDuelDeck();
                    if (duelDeck != null) {
                        duelDeckBox.append(duelDeck.toString(debug));
                        duelDeckBox.setCaretPosition(0);
                        lblDuelCount.setText(String.valueOf(duelDeck.amountOfCards()));
                        btnDuelClose.setEnabled(true);
                    }else{
                        lblDuelName.setText("None");
                    }
                } catch (Exception e) {
                    lblDuelName.setText("None");
                    JOptionPane.showMessageDialog(null, "Error whilst opening Duel deck save in tabbedGui class." + nl + "e.getMessage():"
                            + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                }
                break;
            case JFileChooser.CANCEL_OPTION:
                return;
            case JFileChooser.ERROR_OPTION:
                return;
        }
        duelFile = null;
}//GEN-LAST:event_menuOpenDuelActionPerformed

    /**
     * Open a Shandalar savegame.
     * @param evt
     */
    private void menuOpenGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenGameActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser = new JFileChooser(openGameFile);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Shandalar save files (.SVE)", "SVE");
        fileChooser.setFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(this);
        switch (returnValue) {
            case JFileChooser.APPROVE_OPTION:
                try {
                    gameFile = new RandomAccessFile(fileChooser.getSelectedFile(), "r");
                    openGameFile = fileChooser.getSelectedFile().getPath();
                    if (saveDefaultPath) saveDefaultPath(openGameFile);
                    String[] name = openGameFile.split("\\\\");
                    lblGameName.setText(name[name.length - 1]);
                    gameDeckBox.setText("");
                    gameDeck = getGameDeck();
                    if (gameDeck != null) {
                        gameDeckBox.setText(gameDeck.getSubDeck(selectedDeck).group().toString(debug));
                        gameDeckBox.setCaretPosition(0);
                        lblGameCount.setText(String.valueOf(gameDeck.size()) + " / " + String.valueOf(gameDeck.size()));
                        getGameStats();
                        btnSaveAll.setEnabled(true);
                        btnGameClose.setEnabled(true);
                        btnSaveAll.setEnabled(true);
                    }else{
                        lblGameName.setText("None");
                    }
                } catch (Exception e) {
                    lblGameName.setText("None");
                    JOptionPane.showMessageDialog(null, "Error whilst opening Shandalar save in tabbedGui class." + nl + "e.getMessage():"
                            + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                }
                break;
            case JFileChooser.CANCEL_OPTION:
                return;
            case JFileChooser.ERROR_OPTION:
                return;
        }
        gameFile = null;
}//GEN-LAST:event_menuOpenGameActionPerformed

    /**
 * Checks if the required files are open and then injects the deck.
 * @param evt
 */
    private void btnInjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInjectActionPerformed
    status("Injecting...");
    try {
        if (gameFile == null && !openGameFile.endsWith(".SVE")) {
            JOptionPane.showMessageDialog(this, "No Shandalar save opened.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (duelFile == null && !openDuelFile.endsWith(".dck")) {
            JOptionPane.showMessageDialog(this, "No Duel deck opened.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (duelFile == null) {
            duelFile = new RandomAccessFile(openDuelFile, "r");
        }
        if (!duelFile.getChannel().isOpen()) {
            duelFile = new RandomAccessFile(openDuelFile, "r");
        }
    if (duelDeck.isEmpty()) {
        duelDeck = getDuelDeck();
    }
    gameDeck inject = duelDeck.convert(cardMap);
    if (debug) System.out.println("Injecting: " + inject.toString(debug));
    injectToGame(inject, selectedDeck);
    status("Injected! Thanks go out to Snacko for his help.");
    gameDeck = getGameDeck();
    //gameDeck.group();
    gameDeckBox.setText(gameDeck.getSubDeck(selectedDeck).group().toString(debug));
    gameDeckBox.setCaretPosition(0);
    lblGameCount.setText(gameDeck.getSubDeck(selectedDeck).amountOfCards() + " / " + gameDeck.amountOfCards());
    gameFile = null;
    duelFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error whilst inject in tabbedGui class." + nl + "e.getMessage():"
                        + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInjectActionPerformed

    /**
 * Clears the deck in an open save file.
 * @param evt
 */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
    try {
        if (gameFile == null && !openGameFile.endsWith(".SVE")) {
            JOptionPane.showMessageDialog(this, "No Shandalar save opened.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
    String[] name = openGameFile.split("\\\\");
    lblGameName.setText(name[name.length - 1]);
    clearDeck();
    gameDeck = getGameDeck();
    gameDeckBox.setText(gameDeck.toString(debug));
    gameFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error whilst clearing deck in tabbedGui class." + nl + "e.getMessage():"
                        + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    /**
 * Saves the changes to the status of the main character.
 * @param evt
 */
    private void btnSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAllActionPerformed
statusBar.setText("Saving...");
    try {
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
    setGameStats();
    statusBar.setText("Save successful");
    gameFile = null;
    duelFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error whilst saving all changes in tabbedGui class." + nl + "e.getMessage():"
                        + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveAllActionPerformed

    /**
     * Calls the menuOpenGameActionPerformed method.
     * @param evt
     */
    private void btnOpenGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenGameActionPerformed
        menuOpenGameActionPerformed(evt);
    }//GEN-LAST:event_btnOpenGameActionPerformed

    /**
     * Close the program.
     * @param evt
     */
    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    /**
     * Close the Duel deck. The RandomAccessFile is closed as soon as we are finished
     * using it there but this method removes all the data that was generated during
     * its access so that another file has to be opened before we can inject.
     * @param evt
     */
    private void btnDuelCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuelCloseActionPerformed
        try {
                    openDuelFile = "";
                    lblDuelName.setText("None");
                    duelDeckBox.setText("");
                    duelDeck = null;
                    lblDuelCount.setText("0");
                    btnDuelClose.setEnabled(false);
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error whilst closing the Duel deck in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDuelCloseActionPerformed

    /**
     * Close the Shandalar deck. The RandomAccessFile is closed as soon as we are finished
     * using it there but this method removes all the data that was generated during
     * its access so that another file has to be opened before we can inject.
     * @param evt
     */
    private void btnGameCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGameCloseActionPerformed
        try {
                    openGameFile = "";
                    lblGameName.setText("None");
                    gameDeckBox.setText("");
                    gameDeck = null;
                    lblGameCount.setText("0 / 0");
                    btnGameClose.setEnabled(false);
                    btnSaveAll.setEnabled(false);
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error whilst closing the Shandalar save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGameCloseActionPerformed

    /**
     * Extracts the deck from the currently opened Shandalar save to a duel deck
     * formatted file so that it can be used in Duel.
     * @param evt
     */
    private void menuExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExtractActionPerformed
        try {
            if (!openGameFile.endsWith(".SVE")) {
                JOptionPane.showMessageDialog(this, "No Shandalar save opened.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            statusBar.setText("Extracting deck from Shandalar...");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser = new JFileChooser(openGameFile);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Duel deck files (.dck)", "dck");
            fileChooser.setFileFilter(filter);
            int returnValue = fileChooser.showSaveDialog(this);
            switch (returnValue) {
                case JFileChooser.APPROVE_OPTION:
                    RandomAccessFile deckSaveFile = new RandomAccessFile(fileChooser.getSelectedFile(), "rw");
                    extract(deckSaveFile, gameDeck.getSubDeck(selectedDeck));
                    statusBar.setText("Extract successful");
                    break;
                case JFileChooser.CANCEL_OPTION:
                    return;
                case JFileChooser.ERROR_OPTION:
                    return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst extracting deck from Shandalar save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuExtractActionPerformed

        private void btnExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractActionPerformed
            menuExtractActionPerformed(evt);
        }//GEN-LAST:event_btnExtractActionPerformed

        private void radDeck1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDeck1ActionPerformed
            try{
                selectedDeck = 1;
                if (gameDeck != null){
                gameDeckBox.setText(gameDeck.getSubDeck(1).group().toString(debug));
                gameDeckBox.setCaretPosition(0);
                lblGameCount.setText(gameDeck.getSubDeck(1).amountOfCards() + " / " + gameDeck.amountOfCards());
                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error setting display to Deck 1 in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        }//GEN-LAST:event_radDeck1ActionPerformed

        private void radDeck3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDeck3ActionPerformed
try{
                selectedDeck = 4;
                if (gameDeck != null){
                gameDeckBox.setText(gameDeck.getSubDeck(3).group().toString(debug));
                gameDeckBox.setCaretPosition(0);
                lblGameCount.setText(gameDeck.getSubDeck(3).amountOfCards() + " / " + gameDeck.amountOfCards());
                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error setting display to Deck 3 in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        }//GEN-LAST:event_radDeck3ActionPerformed

        private void radAllCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAllCardsActionPerformed
try{
                selectedDeck = 0;
                if (gameDeck != null){
                gameDeckBox.setText(gameDeck.getSubDeck(0).group().toString(debug));
                gameDeckBox.setCaretPosition(0);
                lblGameCount.setText(gameDeck.amountOfCards() + " / " + gameDeck.amountOfCards());
                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error setting display to all cards in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        }//GEN-LAST:event_radAllCardsActionPerformed

        private void btnSaveHeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveHeroActionPerformed
statusBar.setText("Saving...");
    try {
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
    setGameStats();
    statusBar.setText("Save successful");
    gameFile = null;
    duelFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error whilst saving hero stats changes in tabbedGui class." + nl + "e.getMessage():"
                        + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        }//GEN-LAST:event_btnSaveHeroActionPerformed

        private void chkMagic6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMagic6ActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_chkMagic6ActionPerformed

        private void chkMagicAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMagicAllActionPerformed
if (chkMagicAll.isSelected()){
    markMagicBoxes();
}else{
    unmarkMagicBoxes();
}
        }//GEN-LAST:event_chkMagicAllActionPerformed

    private void menuPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPrefsActionPerformed
        prefGui prefs = new prefGui(new String[]{openGameFile, openDuelFile});
        prefs.setVisible(true);
    }//GEN-LAST:event_menuPrefsActionPerformed

    /**
     * Convert int to Hex String
     * @param in
     * @return
     */
    public String Hex(int in) {
        try {
            String value = Integer.toHexString(in).toUpperCase();
            if (value.equals("FFFFFFFF")) {
                value = "FF";
            }
            if (value.length() == 1) {
                value = "0" + value;
            }
            if (value.length() == 8) {
                char[] Bits = {value.charAt(6), value.charAt(7)};
                value = String.valueOf(Bits);
            }
            return value;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst converting to Hex using Hex(int) in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * Convert byte to Hex String
     * @param in
     * @return
     */
    public String Hex(byte in) {
        try {
            String value = Integer.toHexString(in).toUpperCase();
            if (value.equals("FFFFFFFF")) {
                value = "FF";
            }
            if (value.length() == 1) {
                value = "0" + value;
            }
            if (value.length() == 8) {
                char[] Bits = {value.charAt(6), value.charAt(7)};
                value = String.valueOf(Bits);
            }
            return value;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst converting to Hex using Hex(byte) in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * return a String Hex value from a char
     * @param in
     * @return
     */
    public String Hex(char in) {
        try {
            String value = Integer.toHexString(in).toUpperCase();
            if (value.equals("FFFFFFFF")) {
                value = "FF";
            }
            if (value.length() == 1) {
                value = "0" + value;
            }
            if (value.length() == 8) {
                char[] Bits = {value.charAt(6), value.charAt(7)};
                value = String.valueOf(Bits);
            }

            return value;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst converting to Hex using Hex(char) in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * returns a deck from a Shandalar save, we assume the save is already open
     * @return
     */
    public gameDeck getGameDeck() {
        try {
            gameDeck deck = new gameDeck();
            byte[] cardArray = new byte[4];
            byte cByte;
            int i = 0;
            String j, k = "", cardData = "";
            gameFile.seek(deckStart);
            cByte = gameFile.readByte();
            j = Hex(cByte);
            while (!(j.equals("FF") && k.equals("FF"))) {
                cardData = cardData.concat(j);
                cardArray[i] = cByte;
                cByte = gameFile.readByte();
                k = j;
                j = Hex(cByte);
                ++i;
                if (i == 4) {
                    deck.add(new gameCard(cardData.substring(0, 4), cardMap.gameToName(cardData), cardData.substring(4, 8)).fix());
                    i = 0;
                    cardData = "";
                }
            }
//            deck.group();
            return deck;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst getting deck from Shadalar save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * returns the deck from a duel format deck
     * @return
     */
    public duelDeck getDuelDeck() {
        try {
            duelDeck deck = new duelDeck();
            byte[] cardArray;
            byte cByte;
            int x = 0;
            int i;
            String j, id, name, temp, amount;
            while (x != 8) {
                cByte = duelFile.readByte();
                j = Hex(cByte);
                if (j.equals("3B")) {
                    ++x;
                }
            }
            duelFile.skipBytes(5);
            while (duelFile.getFilePointer() < duelFile.length() - 2) { //until were at the end of the duelFile
                cardArray = new byte[10];
                i = 0;
                j = "";
                temp = "";
                cByte = duelFile.readByte();
                //read id of card
                while (!j.equals("09")) {
                    cardArray[i] = cByte;
                    ++i;
                    cByte = duelFile.readByte();
                    j = Hex(cByte);
                }
                cardArray[i] = -1;
                j = "";
                i = 0;
                while (cardArray[i] != -1) {
                    id = String.valueOf(Integer.valueOf(Hex(cardArray[i])) - 30);
                    temp = temp.concat(id);
                    ++i;
                }//
                id = temp;
                temp = "";
                cardArray = new byte[10];
                i = 0;
                //read amount of card
                cByte = duelFile.readByte();
                while (!j.equals("09")) {
                    cardArray[i] = cByte;
                    ++i;
                    cByte = duelFile.readByte();
                    j = Hex(cByte);
                }
                cardArray[i] = -1;
                j = "";
                i = 0;
                while (cardArray[i] != -1) {
                    amount = String.valueOf(Integer.valueOf(Hex(cardArray[i])) - 30);
                    temp = temp.concat(amount);
                    ++i;
                }//
                amount = temp;
                temp = "";
                cardArray = new byte[50];
                i = 0;
                //read the card name
                cByte = duelFile.readByte();
                while (!j.equals("0D")) {
                    cardArray[i] = cByte;
                    ++i;
                    cByte = duelFile.readByte();
                    if (cByte == -5) cByte = 117;
                    j = Hex(cByte);
                }
                name = new String(cardArray, "ascii");
                name = name.trim();
                //
                deck.add(new duelCard(Integer.parseInt(id), Integer.parseInt(amount), name));
                duelFile.skipBytes(2);
            }//repeat
            return deck;
        } catch (Exception e) {
            if (e.getClass() == java.lang.ArrayIndexOutOfBoundsException.class) {
                JOptionPane.showMessageDialog(this, "Array out of bounds error." + nl
                        + "This is most commonly caused by comments in the deck file, remove them "
                        + "and it should work.");
                return null;
            }
            JOptionPane.showMessageDialog(null, "Error whilst getting deck from Duel deck save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * Injects the given deck into the Shandalar save file which is already opened
     * by another method.
     * @param in The deck to inject.
     */
    public void injectToGame(gameDeck in, int deck) {
        try {
            gameDeck injectDeck = gameDeck.setDeck(deck, in);
            gameFile.seek(deckStart);
            for (gameCard c : injectDeck) {
                for (int i = 1; i <= c.getQuantity(); ++i) {
                    String newCardID = c.getID();
                    String newCardPart = newCardID.substring(0, 2);
                    byte newCardByte = (byte) Integer.parseInt(newCardPart, 16);
                    gameFile.write(newCardByte);
                    newCardPart = newCardID.substring(2, 4);
                    newCardByte = (byte) Integer.parseInt(newCardPart, 16);
                    gameFile.write(newCardByte);
                    String newCardDeck = c.getDeck().substring(0,2);
                    newCardByte = (byte) Integer.parseInt(newCardDeck, 16);
                    gameFile.write(newCardByte);
                    gameFile.write(0);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst injecting deck in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Creates a new file that holds all the information for the given deck in a
     * format that can be read by Duel
     * @param deckSaveFile The RandomAccessFile with rw rights to save to
     * @param gameDeck The deck to save in the gameDeck format
     */
    private void extract(RandomAccessFile deckSaveFile, gameDeck gameDeck) {
        try{
        String name = "", type = "", author = "", comments = "", date = "", number = "", edition = "";
        duelDeck dd = gameDeck.group().convert(cardMap);
        String outString =  ";" + name + nl +
                            ";" + type + nl +
                            ";" + author + nl +
                            ";" + comments + nl +
                            ";" + date + nl +
                            ";" + number + nl +
                            ";" + edition + nl + ";" + nl + nl;
        outString = outString + dd.extractionString();
        deckSaveFile.setLength(1);
        deckSaveFile.seek(0);
        deckSaveFile.writeBytes(outString);
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, "Error saving Shandalar deck to Duel deck format in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Clears the deck in the Shandalar save that is already opened by another method.
     */
    public void clearDeck() {
        try {
            gameFile.seek(deckStart);
            for (int i = 0; i < 500; ++i) {
                gameFile.writeByte(255);
                gameFile.writeByte(255);
                gameFile.writeByte(255);
                gameFile.writeByte(255);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst clearing deck in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Gets the amulets, gold, food, health and max health of our hero
     */
    public void getGameStats() {
        try {
            byte cByte;
            String j, allBytes = "";
            String[] b = new String[4];
            int value;
            gameFile.seek(amuletsStart);
            //we need to read then reverse the bytes cause of endianess
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtAmBlack.setText(String.valueOf(value));
            allBytes = "";
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtAmBlue.setText(String.valueOf(value));
            allBytes = "";
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtAmGreen.setText(String.valueOf(value));
            allBytes = "";
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtAmRed.setText(String.valueOf(value));
            allBytes = "";
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtAmWhite.setText(String.valueOf(value));
            allBytes = "";
            gameFile.seek(goldStart);
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtGold.setText(String.valueOf(value));
            allBytes = "";
            gameFile.seek(foodStart);
            for (int i = 0; i < 4; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 3; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            txtFood.setText(String.valueOf(value));
            allBytes = "";
            gameFile.seek(wmagicStart);
            for (int i = 0; i < 2; ++i) {
                cByte = gameFile.readByte();
                b[i] = Hex(cByte);
            }
            for (int i = 1; i >= 0; --i) {
                allBytes = allBytes.concat(b[i]);
            }
            value = Integer.parseInt(allBytes, 16);
            markMagicBoxes(value);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst getting game stats from Shadalar save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Sets the amulets, gold, food, health and max health of our hero
     */
    private void setGameStats() {
        try {
            byte cByte;
            String j, allBytes = "";
            String[] b = new String[4];
            int value, k;
            gameFile.seek(amuletsStart);
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtAmBlack.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtAmBlue.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtAmGreen.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtAmRed.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtAmWhite.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            gameFile.seek(goldStart);
            //we need to convert to hex then reverse the bytes cause of endianess
            value = Integer.valueOf(txtGold.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            gameFile.seek(foodStart);
            value = Integer.valueOf(txtFood.getText());
            allBytes = Integer.toHexString(value);
            //if we have a hex string less than 8 characters long add some 0s till it is
            if (allBytes.length() < 8) {
                for (int i = 8 - allBytes.length(); i > 0; --i) {
                    allBytes = "0".concat(allBytes);
                }
            }
            k = 3;
            for (int i = 0; i < 8; i = i + 2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 4; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            gameFile.seek(wmagicStart);
            value = Integer.valueOf(magicBoxesToValue());
            allBytes = Integer.toHexString(value);
            if (allBytes.length()%2!=0)allBytes = "0" + allBytes;
            if (allBytes.length()==2)allBytes = "00" + allBytes;
            k = 1;
            for (int i = 0; i < allBytes.length(); i = i+2) {
                b[k] = allBytes.substring(i, i + 2);
                --k;
            }
            for (int i = 0; i < 2; ++i) {
                cByte = (byte) Integer.parseInt(b[i], 16);
                gameFile.write(cByte);
            }
            //TODO - this doesn't work! It should write the limit for the amount of
            //duplicate cards that can be used but the value is overwritten in game.
            if (chkMagic6.isSelected()){
                gameFile.seek(cardDupeStart);
                gameFile.write(4);
            }else{
                gameFile.seek(cardDupeStart);
                gameFile.write(3);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error whilst setting game stats in Shadalar save in tabbedGui class." + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
        gameFile = null;
    }

    /**
     * Marks the check boxes corrisponding to the bitflags of the world magics.
     * @param bitFlags The flags showing which world magics are collected.
     */
    public void markMagicBoxes(int bitFlags) {
        unmarkMagicBoxes();
        if ((bitFlags & 0x0001) == 1){
         chkMagic1.setSelected(true);
        }
        if ((bitFlags & 0x0002) == 2){
         chkMagic2.setSelected(true);
        }
        if ((bitFlags & 0x0004) == 4){
         chkMagic3.setSelected(true);
        }
        if ((bitFlags & 0x0008) == 8){
         chkMagic4.setSelected(true);
        }
        if ((bitFlags & 0x0010) == 16){
            chkMagic5.setSelected(true);
        }
        if ((bitFlags & 0x0020) == 32){
            chkMagic6.setSelected(true);
        }
        if ((bitFlags & 0x0040) == 64){
            chkMagic7.setSelected(true);
        }
        if ((bitFlags & 0x0080) == 128){
         chkMagic8.setSelected(true);
        }
        if ((bitFlags & 0x0100) == 256){
            chkMagic9.setSelected(true);
        }
        if ((bitFlags & 0x0200) == 512){
            chkMagic10.setSelected(true);
        }
        if ((bitFlags & 0x0400) == 1024){
            chkMagic11.setSelected(true);
        }
        if ((bitFlags & 0x0800) == 2048){
            chkMagic12.setSelected(true);
        }
    }

    /**
     * Returns a value showing if each of the world magic checkboxes are checked
     * via bitflags.
     * @return int The value of the checkboxes
     */
    public int magicBoxesToValue(){
        int bitFlags = 0;
        if (chkMagic1.isSelected()){
            bitFlags = bitFlags | 0x0001;
                }
        if (chkMagic2.isSelected()){
            bitFlags = bitFlags | 0x0002;
                }
        if (chkMagic3.isSelected()){
            bitFlags = bitFlags | 0x0004;
        }
        if (chkMagic4.isSelected()){
            bitFlags = bitFlags | 0x0008;
        }
        if (chkMagic5.isSelected()){
            bitFlags = bitFlags | 0x0010;
        }
        if (chkMagic6.isSelected()){
            bitFlags = bitFlags | 0x0020;
        }
        if (chkMagic7.isSelected()){
            bitFlags = bitFlags | 0x0040;
        }
        if (chkMagic8.isSelected()){
            bitFlags = bitFlags | 0x0080;
        }
        if (chkMagic9.isSelected()){
            bitFlags = bitFlags | 0x0100;
        }
        if (chkMagic10.isSelected()){
            bitFlags = bitFlags | 0x0200;
        }
        if (chkMagic11.isSelected()){
            bitFlags = bitFlags | 0x0400;
        }
        if (chkMagic12.isSelected()){
            bitFlags = bitFlags | 0x0800;
        }
return bitFlags;
    }

    /**
     * Marks all the world magic check boxes.
     */
    public void markMagicBoxes() {
        chkMagicAll.setSelected(true);
        chkMagic1.setSelected(true);
        chkMagic2.setSelected(true);
        chkMagic3.setSelected(true);
        chkMagic4.setSelected(true);
        chkMagic5.setSelected(true);
        chkMagic6.setSelected(true);
        chkMagic7.setSelected(true);
        chkMagic8.setSelected(true);
        chkMagic9.setSelected(true);
        chkMagic10.setSelected(true);
        chkMagic11.setSelected(true);
        chkMagic12.setSelected(true);
    }
    /**
     * Unmarks all the world magic check boxes.
     */
    public void unmarkMagicBoxes() {
        chkMagicAll.setSelected(false);
        chkMagic1.setSelected(false);
        chkMagic2.setSelected(false);
        chkMagic3.setSelected(false);
        chkMagic4.setSelected(false);
        chkMagic5.setSelected(false);
        chkMagic6.setSelected(false);
        chkMagic7.setSelected(false);
        chkMagic8.setSelected(false);
        chkMagic9.setSelected(false);
        chkMagic10.setSelected(false);
        chkMagic11.setSelected(false);
        chkMagic12.setSelected(false);
    }

    /**
     * Sets the status bar of the GUI to the given message.
     * @param status The message to display.
     */
    public void status(String status) {
        statusBar.setText(status);
    }

    final public void makeThingsInvisable(){
    }

    private void loadSettingsFromFile() {
        try {
            File settings = new File("settings.cfg");
            if (settings.exists()) {
                String line;
                BufferedReader bf = new BufferedReader(new FileReader(settings));
                while ((line = bf.readLine()) != null) {
                    if (!line.startsWith("//", 0));
                    String[] parts = line.split(":", 2);
                    if (parts[0].trim().equals("shandDir")){
                        openGameFile = "";
                        for (int i = 1; i < parts.length; i++)
                        openGameFile = openGameFile.concat(parts[i].trim());
                    }
                    if (parts[0].trim().equals("deckDir")){
                        openDuelFile = "";
                        for (int i = 1; i < parts.length; i++)
                        openDuelFile = openDuelFile.concat(parts[i].trim());
                    }
                }
                bf.close();
            } else {
                JOptionPane.showMessageDialog(this, "No settings file found! When you next open a .SVE file a settings.cfg " + nl
                        + "file will be created to store the default directories. You can change them " + nl
                        + "at any time in the Preferences window ('File'->'Preferences' or hit F5)", "Warning", JOptionPane.WARNING_MESSAGE);
                saveDefaultPath = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading settings.", "Warning", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * Saves the opened Shandalar path to the settings file. Also works out the
     * path to the playdeck folder which should be inside the same folder.
     * @param openGameFile The path to save
     */
private void saveDefaultPath(String openGameFile) {
    try{
     File settings = new File("settings.cfg");
     String baseDir = openGameFile.substring(0, openGameFile.lastIndexOf("\\"));
     BufferedWriter bf = new BufferedWriter(new FileWriter(settings));
     bf.write("shandDir:" + baseDir + nl);
     bf.write("deckDir:" + baseDir + "\\Playdeck" + nl);
     bf.close();
     openDuelFile = baseDir + "\\Playdeck";
     saveDefaultPath = false;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving settings.", "Warning", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
        UIManager.setLookAndFeel(
            UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Wow, it's the first line of code and already an error has been thrown!" + nl + "e.getMessage():"
                    + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
                    }
            java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new tabbedGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea boxWarnings;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDuelClose;
    private javax.swing.JButton btnExtract;
    private javax.swing.JButton btnGameClose;
    private javax.swing.JButton btnInject;
    private javax.swing.JButton btnOpenDuel;
    private javax.swing.JButton btnOpenGame;
    private javax.swing.JButton btnSaveAll;
    private javax.swing.JButton btnSaveHero;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkMagic1;
    private javax.swing.JCheckBox chkMagic10;
    private javax.swing.JCheckBox chkMagic11;
    private javax.swing.JCheckBox chkMagic12;
    private javax.swing.JCheckBox chkMagic2;
    private javax.swing.JCheckBox chkMagic3;
    private javax.swing.JCheckBox chkMagic4;
    private javax.swing.JCheckBox chkMagic5;
    private javax.swing.JCheckBox chkMagic6;
    private javax.swing.JCheckBox chkMagic7;
    private javax.swing.JCheckBox chkMagic8;
    private javax.swing.JCheckBox chkMagic9;
    private javax.swing.JCheckBox chkMagicAll;
    private javax.swing.JTextArea duelDeckBox;
    private javax.swing.JTextArea gameDeckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDuelCount;
    private javax.swing.JLabel lblDuelDeck;
    private javax.swing.JLabel lblDuelName;
    private javax.swing.JLabel lblFood;
    private javax.swing.JLabel lblGameCount;
    private javax.swing.JLabel lblGameName;
    private javax.swing.JLabel lblGold;
    private javax.swing.JLabel lblHealth;
    private javax.swing.JLabel lblHealth1;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuExtract;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuOpenDuel;
    private javax.swing.JMenuItem menuOpenGame;
    private javax.swing.JMenuItem menuPrefs;
    private javax.swing.JRadioButton radAllCards;
    private javax.swing.JRadioButton radDeck1;
    private javax.swing.JRadioButton radDeck2;
    private javax.swing.JRadioButton radDeck3;
    private javax.swing.JLabel statusBar;
    private javax.swing.JTextField txtAmBlack;
    private javax.swing.JTextField txtAmBlue;
    private javax.swing.JTextField txtAmGreen;
    private javax.swing.JTextField txtAmRed;
    private javax.swing.JTextField txtAmWhite;
    private javax.swing.JTextField txtFood;
    private javax.swing.JTextField txtGold;
    private javax.swing.JTextField txtHealth1;
    private javax.swing.JTextField txtHealth2;
    // End of variables declaration//GEN-END:variables

}
