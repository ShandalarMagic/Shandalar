package gui;

import java.io.RandomAccessFile;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The debug gui for the Deck Injector.
 * @author Ryan Russell
 */
public class testGui extends javax.swing.JFrame {

    final boolean debug = true;
    final String gameDir = "F:\\Play\\Magic\\Game\\Magic\\";
    final String duelDir = "F:\\Play\\Magic\\Game\\Magic\\Playdeck\\";
    final String duel = "MyDeck.dck";
    final String game = "MAGIC4.SVE";
    final String nl = System.getProperty("line.separator");
    final int deckStart = Integer.parseInt("1420", 16);
    final static allCards cardMap = new allCards();
    RandomAccessFile duelFile;
    RandomAccessFile gameFile;
    String openGameFile = gameDir + game;
    String openDuelFile = duelDir + duel;
    gameDeck gameDeck = new gameDeck();
    duelDeck duelDeck = new duelDeck();
    
/**
 * Netbeans generated constructor.
 */
    public testGui() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        duelDeckBox = new javax.swing.JTextArea();
        btnReadGame = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        gameDeckBox = new javax.swing.JTextArea();
        txtBaseCard = new javax.swing.JTextField();
        btnWriteToFiles = new javax.swing.JButton();
        btnLoop = new javax.swing.JButton();
        btnReadDuel = new javax.swing.JButton();
        btnReadAllFiles = new javax.swing.JButton();
        statusBar = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnInject = new javax.swing.JButton();
        lblDuelName = new javax.swing.JLabel();
        lblGameName = new javax.swing.JLabel();
        txtIterations = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuTitleFile1 = new javax.swing.JMenu();
        menuOpenDuel = new javax.swing.JMenuItem();
        menuOpenGame = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        duelDeckBox.setColumns(20);
        duelDeckBox.setLineWrap(true);
        duelDeckBox.setRows(5);
        duelDeckBox.setText(" -Open a .dck file-");
        jScrollPane1.setViewportView(duelDeckBox);

        btnReadGame.setText("Read Game");
        btnReadGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadGameActionPerformed(evt);
            }
        });

        gameDeckBox.setColumns(20);
        gameDeckBox.setLineWrap(true);
        gameDeckBox.setRows(5);
        gameDeckBox.setText(" -Open a .SVE file-");
        jScrollPane2.setViewportView(gameDeckBox);

        txtBaseCard.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtBaseCard.setText("00 00 00 00");
        txtBaseCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBaseCardActionPerformed(evt);
            }
        });

        btnWriteToFiles.setText("Write To Files");
        btnWriteToFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriteToFilesActionPerformed(evt);
            }
        });

        btnLoop.setText("Write Loop");
        btnLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoopActionPerformed(evt);
            }
        });

        btnReadDuel.setText("Read Duel");
        btnReadDuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadDuelActionPerformed(evt);
            }
        });

        btnReadAllFiles.setText("Read All Files");
        btnReadAllFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadAllFilesActionPerformed(evt);
            }
        });

        statusBar.setBackground(new java.awt.Color(220, 220, 220));
        statusBar.setText("Welcome to the Shandalar Deck Injector by RyanfaeScotland.");
        statusBar.setOpaque(true);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Shandalar Deck:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Duel Deck:");

        btnInject.setText("Inject!");
        btnInject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInjectActionPerformed(evt);
            }
        });

        lblDuelName.setText("None");

        lblGameName.setText("None");

        txtIterations.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtIterations.setText("01");
        txtIterations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIterationsActionPerformed(evt);
            }
        });

        jLabel3.setText("Base Card:");

        jLabel4.setText("Iterations:");

        btnClear.setText("Clear Deck");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        menuTitleFile1.setText("File");

        menuOpenDuel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuOpenDuel.setText("Open Duel Deck");
        menuOpenDuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenDuelActionPerformed(evt);
            }
        });
        menuTitleFile1.add(menuOpenDuel);

        menuOpenGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        menuOpenGame.setText("Open Shandalar Deck");
        menuOpenGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenGameActionPerformed(evt);
            }
        });
        menuTitleFile1.add(menuOpenGame);

        jMenuBar2.add(menuTitleFile1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnInject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnReadDuel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnReadGame, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnReadAllFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnWriteToFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnLoop, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIterations, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBaseCard, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDuelName)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblGameName))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblGameName)
                    .addComponent(jLabel2)
                    .addComponent(lblDuelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnReadGame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReadDuel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReadAllFiles)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBaseCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWriteToFiles)
                        .addGap(150, 150, 150)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnInject)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Pressing the Read Game button reads the cards from the currently open
 * save file. If there hasn't been a file opened then the default is used.
 * If there has been a file opened but is now closed it is then opened again.
 * @param evt
 */
private void btnReadGameActionPerformed(java.awt.event.ActionEvent evt) {
    try {
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "r");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "r");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    String[] name = openGameFile.split("\\\\");
    lblGameName.setText(name[name.length-1]);
    gameDeck = getGameDeck();
    gameDeckBox.setText(gameDeck.toString(debug));
    try {
        gameFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}                                           
/**
 * The Write To Files button takes the code entered in the text box
 * and writes it to all the save files, 4 times for each file. Each 
 * time it is written it increases the left most bit by 1.
 * @param evt
 */
private void btnWriteToFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWriteToFilesActionPerformed
    //we don't need to check for files here as this is for adding cards to
    //all the files and is taken care of in the setDeckMultiFile method
    byte[] baseCard = new byte[4];
    String baseCardString = txtBaseCard.getText();
    String[] baseCardArray = baseCardString.split(" ");
    for (int i = 0; i < baseCard.length; ++i) {
        baseCard[i] = (byte) Integer.parseInt(baseCardArray[i], 16);
    }
    setDeckMultiFile(baseCard);
}//GEN-LAST:event_btnWriteToFilesActionPerformed

private void btnLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoopActionPerformed
    // put 4 bytes in the textbox then loop round writing them to the
    // same file increasing by 1 each time
    try {
            gameFile = new RandomAccessFile(openGameFile, "rw");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    String[] name = openGameFile.split("\\\\");
    lblGameName.setText(name[name.length-1]);
    byte[] baseCard = new byte[4];
    String baseCardString = txtBaseCard.getText();
    String[] baseCardArray = baseCardString.split(" ");
    for (int i = 0; i < baseCard.length; ++i) {
        baseCard[i] = (byte) Integer.parseInt(baseCardArray[i], 16);
        }
    setDeckLoop(baseCard, Integer.parseInt(txtIterations.getText()));
    try {
        gameFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}//GEN-LAST:event_btnLoopActionPerformed

private void btnReadDuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadDuelActionPerformed
    try {
        if (duelFile == null) {
            duelFile = new RandomAccessFile(openDuelFile, "r");
        }
        if (!duelFile.getChannel().isOpen()) {
            duelFile = new RandomAccessFile(openDuelFile, "r");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    String[] name = openDuelFile.split("\\\\");
    lblDuelName.setText(name[name.length-1]);
    duelDeck = getDuelDeck();
    duelDeckBox.setText(duelDeck.toString(debug));
    try{
        duelFile = null;
    }catch (Exception e){
        JOptionPane.showMessageDialog(this, e);
    }
}//GEN-LAST:event_btnReadDuelActionPerformed

private void txtBaseCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBaseCardActionPerformed
}//GEN-LAST:event_txtBaseCardActionPerformed

private void btnReadAllFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadAllFilesActionPerformed
    String localDir = "F:\\Play\\Magic\\Game\\Magic\\";
    String localFile = "MAGIC";
    String extension = ".SVE";
    gameDeckBox.setText("");
    try {
        for (int x = 3; x <= 13; ++x) {
            gameFile = new RandomAccessFile(localDir + localFile + Hex(x).replaceFirst("0", "").toLowerCase() + extension, "rw");
            gameDeck currentDeck = getGameDeck();
            gameDeckBox.append("MAGIC" + Hex(x).replaceFirst("0", "").toLowerCase() + extension + " contains:" + nl + currentDeck.toString(debug));
            gameFile = null;
        }
    } catch (Exception e) {
    }
}//GEN-LAST:event_btnReadAllFilesActionPerformed

private void menuOpenGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenGameActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser = new JFileChooser(gameDir);
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Shandalar save files (.SVE)", "SVE");
    fileChooser.setFileFilter(filter);
    int returnValue = fileChooser.showOpenDialog(this);
    switch (returnValue) {
        case JFileChooser.APPROVE_OPTION:
            try {
                gameFile = new RandomAccessFile(fileChooser.getSelectedFile(), "r");
                openGameFile = fileChooser.getSelectedFile().getPath();
                String[] name = openGameFile.split("\\\\");
                lblGameName.setText(name[name.length-1]);
                gameDeckBox.setText("");
                gameDeck = getGameDeck();
                gameDeckBox.setText(gameDeck.toString(debug));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case JFileChooser.CANCEL_OPTION:
            return;
        case JFileChooser.ERROR_OPTION:
            return;
    }  
    gameFile = null;
}//GEN-LAST:event_menuOpenGameActionPerformed

private void menuOpenDuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenDuelActionPerformed
// TODO add your handling code here:private void menuOpenDuelActionPerformed(java.awt.event.ActionEvent evt) {                                         
    //Open Duel deck
    JFileChooser fileChooser = new JFileChooser();
    fileChooser = new JFileChooser(duelDir);
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Duel deck files (.dck)", "dck");
    fileChooser.setFileFilter(filter);
    int returnValue = fileChooser.showOpenDialog(this);
    switch (returnValue) {
        case JFileChooser.APPROVE_OPTION:
            try {
                duelFile = new RandomAccessFile(fileChooser.getSelectedFile(), "r");
                openDuelFile = fileChooser.getSelectedFile().getPath();
                String[] name = openDuelFile.split("\\\\");
                lblDuelName.setText(name[name.length-1]);     
                duelDeckBox.setText("");
                duelDeck = getDuelDeck();
                duelDeckBox.append(duelDeck.toString(debug));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            break;
        case JFileChooser.CANCEL_OPTION:
            return;
        case JFileChooser.ERROR_OPTION:
            return;
    }
    duelFile = null;
}//GEN-LAST:event_menuOpenDuelActionPerformed

private void btnInjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInjectActionPerformed
    try {
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (duelFile == null) {
                duelFile = new RandomAccessFile(openDuelFile, "r");
            }
        if (!duelFile.getChannel().isOpen()) {
                duelFile = new RandomAccessFile(openDuelFile, "r");
            }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    if (duelDeck.isEmpty()) {
        duelDeck = getDuelDeck();
    }
    gameDeck inject = duelDeck.convert(cardMap);
    System.out.println("Injecting: " + inject.toString(debug));
    injectToGame(inject);
    try {
        gameFile = null;
        duelFile = null;
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}//GEN-LAST:event_btnInjectActionPerformed

private void txtIterationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIterationsActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_txtIterationsActionPerformed

private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
    try {
        if (gameFile == null) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
        if (!gameFile.getChannel().isOpen()) {
            gameFile = new RandomAccessFile(openGameFile, "rw");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    String[] name = openGameFile.split("\\\\");
    lblGameName.setText(name[name.length-1]);
    clearDeck();
}//GEN-LAST:event_btnClearActionPerformed

    public String Hex(int in) {
        //Convert int to Hex String
        String value = Integer.toHexString(in).toUpperCase();
        if (value.equals("FFFFFFFF")) {
            value = "FF";
        }
        if (value.length() == 1) {
            value = "0" + value;
        }
        if (value.length() == 8) {
            char[] Bits = {value.charAt(6), value.charAt(7)};
            value = String.valueOf(Bits);
        }
        return value;
    }

    public String Hex(byte in) {
        //Convert byte to Hex String
        String value = Integer.toHexString(in).toUpperCase();
        if (value.equals("FFFFFFFF")) {
            value = "FF";
        }
        if (value.length() == 1) {
            value = "0" + value;
        }
        if (value.length() == 8) {
            char[] Bits = {value.charAt(6), value.charAt(7)};
            value = String.valueOf(Bits);
        }
        return value;
    }
    
    public String Hex(char in) {
//return a String Hex value from a char
        String value = Integer.toHexString(in).toUpperCase();
        if (value.equals("FFFFFFFF")) {
            value = "FF";
        }
        if (value.length() == 1) {
            value = "0" + value;
        }
            if (value.length() == 8) {
            char[] Bits = {value.charAt(6), value.charAt(7)};
            value = String.valueOf(Bits);
        }

        return value;
    }
           
    public void setDeckLoop(byte[] baseCard, int iterations){
    // sets the deck to whatever is in the textbox then with the first byte being
    // the startAmount and increasing to endAmount by 1 byte at a time and writing
    // the new card each time. So we can write a range from 00-FF by stating startAmount
    // as 00 and endAmount as FF then control the deck the cards go into with the textbox.
        try{
        byte[] newCardByte = baseCard;
        gameFile.seek(deckStart);
        for (int i = 0 ; i < iterations ; ++i) {
            newCardByte[0] = (byte) (newCardByte[0] + 1);
            gameFile.write(newCardByte);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    }
    
    public void setDeckMultiFile(byte[] baseCard){
    // sets the card at offset to whatever is in the textbox for MAGIC3.SAV
    // then increases base card by 1 and writes to the next magic duelFile, looping
    // until MAGICd.SAV (MAGIC13.SAV). For each file 4 cards are written, one in each
    // deck one hand
        String localDir = "F:/Play/Magic/Game/Magic/";
        String localFile = "MAGIC";
        String extension = ".SVE";
        byte[] newCardByte = baseCard;        
        try {
            for (byte x = 3 ; x <= 13 ; ++x) {
        gameFile = new RandomAccessFile(localDir + localFile + Hex(x).replaceFirst("0", "").toLowerCase() + extension, "rw");
        gameFile.seek(deckStart);
        gameFile.write(newCardByte);//this card is in the hand
        ++newCardByte[0];
        newCardByte[2] = (byte) 1;  //this card is in deck 1
        gameFile.write(newCardByte);
        ++newCardByte[0];
        newCardByte[2] = (byte) 2;  //this card is in deck 2
        gameFile.write(newCardByte);
        ++newCardByte[0];
        newCardByte[2] = (byte) 4;  //this card is in deck 3
        gameFile.write(newCardByte);
        ++newCardByte[0];
        newCardByte[2] = (byte) 0;  //set us back to in hand
        for (int i = 0;i<251;++i){
        gameFile.write((byte)255);
        }
        gameFile = null;
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    }
    
    public String duelToName(int inCard){
        switch(inCard){
case 0: return "Air Elemental";
case 1: return "Ancestral Recall";
case 2: return "Animate Artifact";
case 3: return "Animate Dead";
case 4: return "Animate Wall";
case 5: return "Ankh of Mishra";
case 6: return "Armageddon";
case 7: return "Aspect of Wolf";
case 8: return "Bad Moon";
case 9: return "Badlands";
case 10: return "Balance";
case 11: return "Basalt Monolith";
case 12: return "Bayou";
case 13: return "Benalish Hero";
case 14: return "Berserk";
case 15: return "Birds of Paradise";
case 16: return "Black Knight";
case 17: return "Black Lotus";
case 18: return "Black Vise";
case 19: return "Black Ward";
case 20: return "Blaze of Glory";
case 21: return "Blessing";
case 22: return "Blue Elemental Blast";
case 23: return "Blue Ward";
case 24: return "Bog Wraith";
case 25: return "Braingeyser";
case 26: return "Burrowing";
case 27: return "Camouflage";
case 28: return "Castle";
case 29: return "Celestial Prism";
case 30: return "Channel";
case 31: return "Chaos Orb";
case 32: return "Chaoslace";
case 33: return "Circle of Protection: Black";
case 34: return "Circle of Protection: Blue";
case 35: return "Circle of Protection: Green";
case 36: return "Circle of Protection: Red";
case 37: return "Circle of Protection: White";
case 38: return "Clockwork Beast";
case 39: return "Clone";
case 40: return "Cockatrice";
case 41: return "Consecrate Land";
case 42: return "Conservator";
case 43: return "Contract from Below";
case 44: return "Control Magic";
case 45: return "Conversion";
case 46: return "Copper Tablet";
case 47: return "Copy Artifact";
case 48: return "Counterspell";
case 49: return "Craw Wurm";
case 50: return "Creature Bond";
case 51: return "Crusade";
case 52: return "Crystal Rod";
case 53: return "Cursed Land";
case 54: return "Cyclopean Tomb";
case 55: return "Dark Ritual";
case 56: return "Darkpact";
case 57: return "Death Ward";
case 58: return "Deathgrip";
case 59: return "Deathlace";
case 60: return "Demonic Attorney";
case 61: return "Demonic Hordes";
case 62: return "Demonic Tutor";
case 63: return "Dingus Egg";
case 64: return "Disenchant";
case 65: return "Disintegrate";
case 66: return "Disrupting Scepter";
case 67: return "Dragon Whelp";
case 68: return "Drain Life";
case 69: return "Drain Power";
case 70: return "Drudge Skeletons";
case 71: return "Dwarven Demolition Team";
case 72: return "Dwarven Warriors";
case 73: return "Earth Elemental";
case 74: return "Earthbind";
case 75: return "Earthquake";
case 76: return "Elvish Archers";
case 77: return "Evil Presence";
case 78: return "False Orders";
case 79: return "Farmstead";
case 80: return "Fastbond";
case 81: return "Fear";
case 82: return "Feedback";
case 83: return "Fire Elemental";
case 84: return "Fireball";
case 85: return "Firebreathing";
case 86: return "Flashfires";
case 87: return "Flight";
case 88: return "Fog";
case 89: return "Force of Nature";
case 90: return "Forcefield";
case 91: return "Forest";
case 92: return "Fork";
case 93: return "Frozen Shade";
case 94: return "Fungusaur";
case 95: return "Gaea's Liege";
case 96: return "Gauntlet of Might";
case 97: return "Giant Growth";
case 98: return "Giant Spider";
case 99: return "Glasses of Urza";
case 100: return "Gloom";
case 101: return "Goblin Balloon Brigade";
case 102: return "Goblin King";
case 103: return "Granite Gargoyle";
case 104: return "Gray Ogre";
case 105: return "Green Ward";
case 106: return "Grizzly Bears";
case 107: return "Guardian Angel";
case 108: return "Healing Salve";
case 109: return "Helm of Chatzuk";
case 110: return "Hill Giant";
case 111: return "Holy Armor";
case 112: return "Holy Strength";
case 113: return "Howl from Beyond";
case 114: return "Howling Mine";
case 115: return "Hurloon Minotaur";
case 116: return "Hurricane";
case 117: return "Hypnotic Specter";
case 118: return "Ice Storm";
case 119: return "Icy Manipulator";
case 120: return "Illusionary Mask";
case 121: return "Instill Energy";
case 122: return "Invisibility";
case 123: return "Iron Star";
case 124: return "Ironclaw Orcs";
case 125: return "Ironroot Treefolk";
case 126: return "Island";
case 127: return "Island Sanctuary";
case 128: return "Ivory Cup";
case 129: return "Jade Monolith";
case 130: return "Jade Statue";
case 131: return "Jayemdae Tome";
case 132: return "Juggernaut";
case 133: return "Jump";
case 134: return "Karma";
case 135: return "Keldon Warlord";
case 136: return "Kormus Bell";
case 137: return "Kudzu";
case 138: return "Lance";
case 139: return "Ley Druid";
case 140: return "Library of Leng";
case 141: return "Lich";
case 142: return "Lifeforce";
case 143: return "Lifelace";
case 144: return "Lifetap";
case 145: return "Lightning Bolt";
case 146: return "Living Artifact";
case 147: return "Living Lands";
case 148: return "Living Wall";
case 149: return "Llanowar Elves";
case 150: return "Lord of Atlantis";
case 151: return "Lord of the Pit";
case 152: return "Lure";
case 153: return "Magical Hack";
case 154: return "Mahamoti Djinn";
case 155: return "Mana Flare";
case 156: return "Mana Short";
case 157: return "Mana Vault";
case 158: return "Manabarbs";
case 159: return "Meekstone";
case 160: return "Merfolk of the Pearl Trident";
case 161: return "Mesa Pegasus";
case 162: return "Mind Twist";
case 163: return "Mons Goblin Raiders";
case 164: return "Mountain";
case 165: return "Mox Emerald";
case 166: return "Mox Jet";
case 167: return "Mox Pearl";
case 168: return "Mox Ruby";
case 169: return "Mox Sapphire";
case 170: return "Natural Selection";
case 171: return "Nether Shadow";
case 172: return "Nettling Imp";
case 173: return "Nevinyrral's Disk";
case 174: return "Nightmare";
case 175: return "Northern Paladin";
case 176: return "Obsianus Golem";
case 177: return "Orcish Artillery";
case 178: return "Orcish Oriflamme";
case 179: return "Paralyze";
case 180: return "Pearled Unicorn";
case 181: return "Personal Incarnation";
case 182: return "Pestilence";
case 183: return "Phantasmal Forces";
case 184: return "Phantasmal Terrain";
case 185: return "Phantom Monster";
case 186: return "Pirate Ship";
case 187: return "Plague Rats";
case 188: return "Plains";
case 189: return "Plateau";
case 190: return "Power Leak";
case 191: return "Power Sink";
case 192: return "Power Surge";
case 193: return "Prodigal Sorcerer";
case 194: return "Psionic Blast";
case 195: return "Psychic Venom";
case 196: return "Purelace";
case 197: return "Raging River";
case 198: return "Raise Dead";
case 199: return "Red Elemental Blast";
case 200: return "Red Ward";
case 201: return "Regeneration";
case 202: return "Regrowth";
case 203: return "Resurrection";
case 204: return "Reverse Damage";
case 205: return "Righteousness";
case 206: return "Roc of Kher Ridges";
case 207: return "Rock Hydra";
case 208: return "Rod of Ruin";
case 209: return "Royal Assassin";
case 210: return "Sacrifice";
case 211: return "Samite Healer";
case 212: return "Savannah";
case 213: return "Savannah Lions";
case 214: return "Scathe Zombies";
case 215: return "Scavenging Ghoul";
case 216: return "Scrubland";
case 217: return "Scryb Sprites";
case 218: return "Sea Serpent";
case 219: return "Sedge Troll";
case 220: return "Sengir Vampire";
case 221: return "Serra Angel";
case 222: return "Shanodin Dryads";
case 223: return "Shatter";
case 224: return "Shivan Dragon";
case 225: return "Simulacrum";
case 226: return "Sinkhole";
case 227: return "Siren's Call";
case 228: return "Sleight of Mind";
case 229: return "Smoke";
case 230: return "Sol Ring";
case 231: return "Soul Net";
case 232: return "Spell Blast";
case 233: return "Stasis";
case 234: return "Steal Artifact";
case 235: return "Stone Giant";
case 236: return "Stone Rain";
case 237: return "Stream of Life";
case 238: return "Sunglasses of Urza";
case 239: return "Swamp";
case 240: return "Swords to Plowshares";
case 241: return "Taiga";
case 242: return "Terror";
case 243: return "The Hive";
case 244: return "Thicket Basilisk";
case 245: return "Thoughtlace";
case 246: return "Throne of Bone";
case 247: return "Timber Wolves";
case 248: return "Time Vault";
case 249: return "Time Walk";
case 250: return "Timetwister";
case 251: return "Tranquility";
case 252: return "Tropical Island";
case 253: return "Tsunami";
case 254: return "Tundra";
case 255: return "Tunnel";
case 256: return "Twiddle";
case 257: return "Two Headed Giant of Foriys";
case 258: return "Underground Sea";
case 259: return "Unholy Strength";
case 260: return "Unsummon";
case 261: return "Uthden Troll";
case 262: return "Verduran Enchantress";
case 263: return "Vesuvan Doppleganger";
case 264: return "Veteran Bodyguard";
case 265: return "Volcanic Eruption";
case 266: return "Volcanic Island";
case 267: return "Wall of Air";
case 268: return "Wall of Bone";
case 269: return "Wall of Brambles";
case 270: return "Wall of Fire";
case 271: return "Wall of Ice";
case 272: return "Wall of Stone";
case 273: return "Wall of Swords";
case 274: return "Wall of Water";
case 275: return "Wall of Wood";
case 276: return "Wanderlust";
case 277: return "War Mammoth";
case 278: return "Warp Artifact";
case 279: return "Water Elemental";
case 280: return "Weakness";
case 281: return "Web";
case 282: return "Wheel of Fortune";
case 283: return "White Knight";
case 284: return "White Ward";
case 285: return "Wild Growth";
case 286: return "Will-O'-The-Wisp";
case 287: return "Winter Orb";
case 288: return "Wooden Sphere";
case 289: return "Word of Command";
case 290: return "Wrath of God";
case 291: return "Zombie Master";
case 292: return "Amnesia";
case 293: return "Angry Mob";
case 294: return "Ashes to Ashes";
case 295: return "Ball Lightning";
case 296: return "Banshee";
case 297: return "Barl's Cage";
case 298: return "Dark Heart of the Wood";
case 299: return "Blood Moon";
case 300: return "Apprentice Wizard";
case 301: return "Blood of the Martyr";
case 302: return "Bone Flute";
case 303: return "Brainwash";
case 304: return "Brothers of Fire";
case 305: return "Carnivorous Plant";
case 306: return "Cave People";
case 307: return "City of Shadows";
case 308: return "Coal Golem";
case 309: return "Dance of Many";
case 310: return "Deep Water";
case 311: return "Dust to Dust";
case 312: return "Eater of the Dead";
case 313: return "Elves of Deep Shadow";
case 314: return "Erosion";
case 315: return "Eternal Flame";
case 316: return "Exorcist";
case 317: return "Fasting";
case 318: return "Fellwar Stone";
case 319: return "Fire and Brimstone";
case 320: return "Fire Drake";
case 321: return "Fissure";
case 322: return "Scarwood Hag";
case 323: return "People of the Woods";
case 324: return "Fountain of Youth";
case 325: return "Frankenstein's Monster";
case 326: return "Ghost Ship";
case 327: return "Giant Shark";
case 328: return "Spitting Slug";
case 329: return "Goblin Caves";
case 330: return "Goblin Hero";
case 331: return "Goblin Wizard";
case 332: return "Goblins of the Flarg";
case 333: return "Grave Robbers";
case 334: return "Gaea's Touch";
case 335: return "Hidden Path";
case 336: return "Bog Imp";
case 337: return "Inferno";
case 338: return "Knights of Thorn";
case 339: return "Land Leeches";
case 340: return "Leviathan";
case 341: return "Living Armor";
case 342: return "Lurker";
case 343: return "Mana Clash";
case 344: return "Mana Vortex";
case 345: return "Martyr's Cry";
case 346: return "Mind Bomb";
case 347: return "Morale";
case 348: return "Necropolis";
case 349: return "Orc General";
case 350: return "Bog Rats";
case 351: return "Preacher";
case 352: return "Psychic Allergy";
case 353: return "Book of Rass";
case 354: return "Reflecting Mirror";
case 355: return "Riptide";
case 356: return "Runesword";
case 357: return "Safe Haven";
case 358: return "Scarecrow";
case 359: return "Season of the Witch";
case 360: return "Sisters of the Flame";
case 361: return "Skull of Orm";
case 362: return "Standing Stones";
case 363: return "Stone Calender";
case 364: return "Sunken City";
case 365: return "Marsh Gas";
case 366: return "Marsh Goblins";
case 367: return "Cleansing";
case 368: return "Tormod's Crypt";
case 369: return "Dark Sphere";
case 370: return "The Drowned";
case 371: return "Murk Dwellers";
case 372: return "The Fallen";
case 373: return "Niall Silvain";
case 374: return "Inquisition";
case 375: return "Holy Light";
case 376: return "Diabolic Machine";
case 377: return "Maze of Ith";
case 378: return "Nameless Race";
case 379: return "Tower of Coireall";
case 380: return "Tracker";
case 381: return "Sorrow's Path";
case 382: return "Uncle Istvan";
case 383: return "Venom";
case 384: return "Wand of Ith";
case 385: return "War Barge";
case 386: return "Whippoorwill";
case 387: return "Witch Hunter";
case 388: return "Word of Binding";
case 389: return "Wormwood Treefolk";
case 390: return "Worms of the Earth";
case 391: return "Abu Jafar";
case 392: return "Aladdin";
case 393: return "Aladdin's Lamp";
case 394: return "Ali Baba";
case 395: return "Ali from Cairo";
case 396: return "Aladdin's Ring";
case 397: return "Army of Allah";
case 398: return "Bazaar of Baghdad";
case 399: return "Bird Maiden";
case 400: return "Bottle of Suleiman";
case 401: return "Camel";
case 402: return "City in a Bottle";
case 403: return "City of Brass";
case 404: return "Cuombajj Witches";
case 405: return "Cyclone";
case 406: return "Dandan";
case 407: return "Desert";
case 408: return "Desert Nomads";
case 409: return "Desert Twister";
case 410: return "Diamond Valley";
case 411: return "Drop of Honey";
case 412: return "Ebony Horse";
case 413: return "El-Hajjaj";
case 414: return "Elephant Graveyard";
case 415: return "Erg Raiders";
case 416: return "Erhnam Djinn";
case 417: return "Eye for an Eye";
case 418: return "Fishliver Oil";
case 419: return "Flying Carpet";
case 420: return "Flying Men";
case 421: return "Ghazban Ogre";
case 422: return "Giant Tortoise";
case 423: return "Guardian Beast";
case 424: return "Hasran Ogress";
case 425: return "Hurr Jackal";
case 426: return "Ifh-Biff Efreet";
case 427: return "Island Fish Jasconius";
case 428: return "Island of Wak-Wak";
case 429: return "Jandor's Ring";
case 430: return "Jandor's Saddlebags";
case 431: return "Jeweled Bird";
case 432: return "Jihad";
case 433: return "Junun Efreet";
case 434: return "Juzam Djinn";
case 435: return "Khabal Ghoul";
case 436: return "King Suleiman";
case 437: return "Kird Ape";
case 438: return "Library of Alexandria";
case 439: return "Magnetic Mountain";
case 440: return "Merchant Ship";
case 441: return "Metamorphosis";
case 442: return "Mijae Djinn";
case 443: return "Moorish Cavalry";
case 444: return "Nafs Asp";
case 445: return "Oasis";
case 446: return "Old Man of the Sea";
case 447: return "Oubliette";
case 448: return "Piety";
case 449: return "Pyramids";
case 450: return "Repentant Blacksmith";
case 451: return "Ring of Maruf";
case 452: return "Rukh Egg";
case 453: return "Sandals of Abdallah";
case 454: return "Sandstorm";
case 455: return "Serendib Djinn";
case 456: return "Serendib Efreet";
case 457: return "Shahrazad";
case 458: return "Sindbad";
case 459: return "Singing Tree";
case 460: return "Sorceress Queen";
case 461: return "Stone Throwing Devils";
case 462: return "Unstable Mutation";
case 463: return "War Elephant";
case 464: return "Wyluli Wolf";
case 465: return "Ydwen Efreet";
case 466: return "Amulet of Kroog";
case 467: return "Argivian Archaeoligist";
case 468: return "Argivian Blacksmith";
case 469: return "Argothian Pixies";
case 470: return "Argothian Treefolk";
case 471: return "Armageddon Clock";
case 472: return "Artifact Blast";
case 473: return "Artifact Ward";
case 474: return "Ashnod's Altar";
case 475: return "Ashnod's Battle Gear";
case 476: return "Ashnod's Transmogrant";
case 477: return "Atog";
case 478: return "Battering Ram";
case 479: return "Bronze Tablet";
case 480: return "Candelabra of Tawnos";
case 481: return "Circle of Protection: Artifacts";
case 482: return "Citanul Druid";
case 483: return "Clay Statue";
case 484: return "Clockwork Avian";
case 485: return "Colossus of Sardia";
case 486: return "Coral Helm";
case 487: return "Crumble";
case 488: return "Cursed Rack";
case 489: return "Damping Field";
case 490: return "Detonate";
case 491: return "Drafna's Restoration";
case 492: return "Dragon Engine";
case 493: return "Dwarven Weaponsmith";
case 494: return "Energy Flux";
case 495: return "Feldon's Cane";
case 496: return "Gaea's Avenger";
case 497: return "Gate to Phyrexia";
case 498: return "Goblin Artisans";
case 499: return "Golgothian Sylex";
case 500: return "Grapeshot Catapult";
case 501: return "Haunting Wind";
case 502: return "Hurkyl's Recall";
case 503: return "Ivory Tower";
case 504: return "Jalum Tome";
case 505: return "Martyrs of Korlis";
case 506: return "Mightstone";
case 507: return "Millstone";
case 508: return "Mishra's Factory";
case 509: return "Mishra's War Machine";
case 510: return "Mishra's Workshop";
case 511: return "Obelisk of Undoing";
case 512: return "Onulet";
case 513: return "Orcish Mechanics";
case 514: return "Ornithopter";
case 515: return "Phyrexian Gremlins";
case 516: return "Artifact Possession";
case 517: return "Power Artifact";
case 518: return "Powerleech";
case 519: return "Primal Clay";
case 520: return "Rakalite";
case 521: return "Reconstruction";
case 522: return "Reverse Polarity";
case 523: return "Rocket Launcher";
case 524: return "Sage of Lat-Nam";
case 525: return "Shapeshifter";
case 526: return "Shatterstorm";
case 527: return "Staff of Zegon";
case 528: return "Strip Mine";
case 529: return "Su-Chi";
case 530: return "Tablet of Epityr";
case 531: return "Tawnos's Coffin";
case 532: return "Tawnos's Wand";
case 533: return "Tawnos's Weaponry";
case 534: return "Tetravus";
case 535: return "The Rack";
case 536: return "Titania's Song";
case 537: return "Transmute Artifact";
case 538: return "Triskelion";
case 539: return "Urza's Avenger";
case 540: return "Urza's Chalice";
case 541: return "Urza's Mine";
case 542: return "Urza's Miter";
case 543: return "Urza's Power Plant";
case 544: return "Urza's Tower";
case 545: return "Wall of Spears";
case 546: return "Weakstone";
case 547: return "Xenic Poltergeist";
case 548: return "Yawgmoth Demon";
case 549: return "Priest of Yawgmoth";
case 550: return "Yotian Soldiers";
case 551: return "Abomination";
case 552: return "Acid Rain";
case 553: return "Active Volcano";
case 554: return "Adun Oakenshield";
case 555: return "Adventurers' Guildhouse";
case 556: return "Aerathi Berserker";
case 557: return "Aisling Leprechaun";
case 558: return "Akron Legionnaire";
case 559: return "Al-abara's Carpet";
case 560: return "Alabaster Potion";
case 561: return "Alchor's Tomb";
case 562: return "All Hallows Eve";
case 563: return "Amrou Kithkin";
case 564: return "Angelic Voices";
case 565: return "Angus Mackenzie";
case 566: return "Anti-Magic Aura";
case 567: return "Arboria";
case 568: return "Arcades Sabboth";
case 569: return "Arena of the Ancients";
case 570: return "Avoid Fate";
case 571: return "Axelrod Gunnarson";
case 572: return "Ayesha Tanaka";
case 573: return "Azure Drake";
case 574: return "Backdraft";
case 575: return "Backfire";
case 576: return "Barbary Apes";
case 577: return "Barktooth Warbeard";
case 578: return "Bartel Runeaxe";
case 579: return "Beasts of Bogardan";
case 580: return "Black Mana Battery";
case 581: return "Blazing Effigy";
case 582: return "Blight";
case 583: return "Blood Lust";
case 584: return "Blue Mana Battery";
case 585: return "Boomerang";
case 586: return "Boris Devilboon";
case 587: return "Brine Hag";
case 588: return "Bronze Horse";
case 589: return "Carrion Ants";
case 590: return "Cat Warriors";
case 591: return "Cathedral of Serra";
case 592: return "Caverns of Despair";
case 593: return "Chain Lightning";
case 594: return "Chains of Mephistopholes";
case 595: return "Chromium";
case 596: return "Cleanse";
case 597: return "Clergy of the Holy Nimbus";
case 598: return "Cocoon";
case 599: return "Concordant Crossroads";
case 600: return "Cosmic Horror";
case 601: return "Craw Giant";
case 602: return "Crevasse";
case 603: return "Crimson Kobolds";
case 604: return "Crimson Manticore";
case 605: return "Crookshank Kobolds";
case 606: return "Cyclopean Mummy";
case 607: return "D'Avenant Archer";
case 608: return "Dakkon Blackblade";
case 609: return "Darkness";
case 610: return "Deadfall";
case 611: return "Demonic Torment";
case 612: return "Devouring Deep";
case 613: return "Disharmony";
case 614: return "Divine Intervention";
case 615: return "Divine Offering";
case 616: return "Divine Transformation";
case 617: return "Dream Coat";
case 618: return "Durkwood Boars";
case 619: return "Dwarven Song";
case 620: return "Elder Land Wurm";
case 621: return "Elder Spawn";
case 622: return "Elven Riders";
case 623: return "Emerald Dragonfly";
case 624: return "Enchanted Being";
case 625: return "Enchantment Alteration";
case 626: return "Energy Tap";
case 627: return "Equinox";
case 628: return "Eternal Warrior";
case 629: return "Eureka";
case 630: return "Evil Eye of Orms-by-Gore";
case 631: return "Fallen Angel";
case 632: return "Falling Star";
case 633: return "Feint";
case 634: return "Field of Dreams";
case 635: return "Fire Sprites";
case 636: return "Firestorm Phoenix";
case 637: return "Flash Counter";
case 638: return "Flash Flood";
case 639: return "Floral Spuzzem";
case 640: return "Force Spike";
case 641: return "Forethought Amulet";
case 642: return "Fortified Area";
case 643: return "Frost Giant";
case 644: return "Gabriel Angelfire";
case 645: return "Gaseous Form";
case 646: return "Gauntlets of Chaos";
case 647: return "Ghosts of the Damned";
case 648: return "Giant Slug";
case 649: return "Giant Strength";
case 650: return "Giant Turtle";
case 651: return "Glyph of Delusion";
case 652: return "Glyph of Destruction";
case 653: return "Glyph of Doom";
case 654: return "Glyph of Life";
case 655: return "Glyph of Reincarnation";
case 656: return "Gosta Dirk";
case 657: return "Gravity Sphere";
case 658: return "Great Defender";
case 659: return "Great Wall";
case 660: return "Greater Realm of Preservation";
case 661: return "Greed";
case 662: return "Green Mana Battery";
case 663: return "Gwendlyn Di Corci";
case 664: return "Halfdane";
case 665: return "Hammerheim";
case 666: return "Hazezon Tamar";
case 667: return "Headless Horseman";
case 668: return "Heaven's Gate";
case 669: return "Hell Swarm";
case 670: return "Hell's Caretaker";
case 671: return "Hellfire";
case 672: return "Holy Day";
case 673: return "Horn of Deafening";
case 674: return "Hornet Cobra";
case 675: return "Horror of Horrors";
case 676: return "Hunding Gjornersen";
case 677: return "Hyperion Blacksmith";
case 678: return "Ichneumon Druid";
case 679: return "Immolation";
case 680: return "Imprison";
case 681: return "In the Eye of Chaos";
case 682: return "Indestructable Aura";
case 683: return "Infernal Medusa";
case 684: return "Infinite Authority";
case 685: return "Invoke Prejudice";
case 686: return "Ivory Guardians";
case 687: return "Jacques le Vert";
case 688: return "Jasmine Boreal";
case 689: return "Jedit Ojanen";
case 690: return "Jerrard of the Closed Fist";
case 691: return "Johan";
case 692: return "Jovial Evil";
case 693: return "Juxtapose";
case 694: return "Karakas";
case 695: return "Kasimer the Lone Wolf";
case 696: return "Keepers of the Faith";
case 697: return "Kei Takahashi";
case 698: return "Killer Bees";
case 699: return "Kismet";
case 700: return "Knowledge Vault";
case 701: return "Kobold Drill Sergeant";
case 702: return "Kobold Overlord";
case 703: return "Kobold Taskmaster";
case 704: return "Kobolds of Kher Keep";
case 705: return "Kry Shield";
case 706: return "Lady Caleria";
case 707: return "Lady Evangela";
case 708: return "Lady Orca";
case 709: return "Land Equilibrium";
case 710: return "Land Tax";
case 711: return "Land's Edge";
case 712: return "Lesser Werewolf";
case 713: return "Life Chisel";
case 714: return "Life Matrix";
case 715: return "Lifeblood";
case 716: return "Living Plane";
case 717: return "Livonya Silone";
case 718: return "Lord Magnus";
case 719: return "Lost Soul";
case 720: return "Mana Drain";
case 721: return "Mana Matrix";
case 722: return "Marble Priest";
case 723: return "Marhault Elsdragon";
case 724: return "Master of the Hunt";
case 725: return "Mirror Universe";
case 726: return "Moat";
case 727: return "Mold Demon";
case 728: return "Moss Monster";
case 729: return "Mountain Stronghold";
case 730: return "Mountain Yeti";
case 731: return "Nebuchadnezzar";
case 732: return "Nether Void";
case 733: return "Nicol Bolas";
case 734: return "North Star";
case 735: return "Nova Pentacle";
case 736: return "Osai Vultures";
case 737: return "Palladia-Mors";
case 738: return "Part Water";
case 739: return "Pavel Maliki";
case 740: return "Pendelhaven";
case 741: return "Petra Sphinx";
case 742: return "Pit Scorpion";
case 743: return "Pixie Queen";
case 744: return "Planar Gate";
case 745: return "Pradesh Gypsies";
case 746: return "Presence of the Master";
case 747: return "Primordial Ooze";
case 748: return "Princess Lucrezia";
case 749: return "Psionic Entity";
case 750: return "Psychic Purge";
case 751: return "Puppet Master";
case 752: return "Pyrotechnics";
case 753: return "Quagmire";
case 754: return "Quarum Trench Gnomes";
case 755: return "Rabid Wombat";
case 756: return "Radjan Spirit";
case 757: return "Raging Bull";
case 758: return "Ragnar";
case 759: return "Ramirez DePietro";
case 760: return "Ramses Overdark";
case 761: return "Rapid Fire";
case 762: return "Rasputin Dreamweaver";
case 763: return "Rebirth";
case 764: return "Recall";
case 765: return "Red Mana Battery";
case 766: return "Reincarnation";
case 767: return "Relic Barrier";
case 768: return "Relic Bind";
case 769: return "Remove Enchantment";
case 770: return "Remove Soul";
case 771: return "Reset";
case 772: return "Revelation";
case 773: return "Reverberation";
case 774: return "Righteous Avengers";
case 775: return "Ring of Immortals";
case 776: return "Riven Turnbull";
case 777: return "Rohgahh of Kher Keep";
case 778: return "Rust";
case 779: return "Sea Kings' Blessing";
case 780: return "Seafarer's Quay";
case 781: return "Seeker";
case 782: return "Segovian Leviathan";
case 783: return "Sentinel";
case 784: return "Serpent Generator";
case 785: return "Shelkin Brownie";
case 786: return "Shield Wall";
case 787: return "Shimian Night Stalker";
case 788: return "Silhouette";
case 789: return "Sir Shandlar of Eberyn";
case 790: return "Sivitri Scarzam";
case 791: return "Sol'kanar the Swamp King";
case 792: return "Spectral Cloak";
case 793: return "Spinal Villain";
case 794: return "Spirit Link";
case 795: return "Spirit Shackle";
case 796: return "Spiritual Sanctuary";
case 797: return "Stangg";
case 798: return "Storm Seeker";
case 799: return "Storm World";
case 800: return "Subdue";
case 801: return "Sunastian Falconer";
case 802: return "Sword of the Ages";
case 803: return "Sylvan Library";
case 804: return "Sylvan Paradise";
case 805: return "Syphon Soul";
case 806: return "Tabernacle at Pendrell Vale";
case 807: return "Takklemaggot";
case 808: return "Telekinesis";
case 809: return "Teleport";
case 810: return "Tempest Efreet";
case 811: return "Tetsuo Umezawa";
case 812: return "The Abyss";
case 813: return "The Brute";
case 814: return "The Lady of the Mountain";
case 815: return "The Wretched";
case 816: return "Thunder Spirit";
case 817: return "Time Elemental";
case 818: return "Tobias Andrion";
case 819: return "Tolaria";
case 820: return "Tor Wauki";
case 821: return "Torsten Von Ursus";
case 822: return "Touch of Darkness";
case 823: return "Transmutation";
case 824: return "Triassic Egg";
case 825: return "Tuknir Deathlock";
case 826: return "Tundra Wolves";
case 827: return "Typhoon";
case 828: return "Undertow";
case 829: return "Underworld Dreams";
case 830: return "Unholy Citadel";
case 831: return "Untamed Wilds";
case 832: return "Ur-Drago";
case 833: return "Urborg";
case 834: return "Vaevictis Asmadi";
case 835: return "Vampire Bats";
case 836: return "Venarian Gold";
case 837: return "Visions";
case 838: return "Voodoo Doll";
case 839: return "Walking Dead";
case 840: return "Wall of Caltrops";
case 841: return "Wall of Dust";
case 842: return "Wall of Earth";
case 843: return "Wall of Heat";
case 844: return "Wall of Light";
case 845: return "Wall of Opposition";
case 846: return "Wall of Putrid Flesh";
case 847: return "Wall of Shadows";
case 848: return "Wall of Tombstones";
case 849: return "Wall of Vapor";
case 850: return "Wall of Wonder";
case 851: return "Whirling Dervish";
case 852: return "White Mana Battery";
case 853: return "Willow Satyr";
case 854: return "Winds of Change";
case 855: return "Winter Blast";
case 856: return "Wolverine Pack";
case 857: return "Wood Elemental";
case 858: return "Xira Arien";
case 859: return "Zephyr Falcon";
case 860: return "Call from the Grave";
case 861: return "Prismatic Dragon";
case 862: return "Knights of the Rainbow Vale";
case 863: return "Pandora's Box";
case 864: return "Whimsy";
case 865: return "Faerie Dragon";
case 866: return "Goblin Polka Band";
case 867: return "Power Struggle";
case 868: return "Aswan Jaguar";
case 869: return "Orcish Catapult";
case 870: return "Gem Bazaar";
case 871: return "Necropolis of Azaar";
case 872: return "Red Guild";
case 873: return "Blue Guild";
case 874: return "White Guild";
case 875: return "Green Guild";
case 876: return "Black Guild";
case 877: return "Artificer's Guild";
case 878: return "Bright Society";
case 879: return "Grey Society";
case 880: return "Dark Society";
case 881: return "Gladiator";
case 882: return "Master";
case 883: return "Royalty";
case 884: return "Veteran";
case 885: return "Giant Wasp";
case 886: return "Wolves of the Hunt";
case 887: return "Poison Snake";
case 888: return "Minor Demon";
case 889: return "Sand Warrior";
case 890: return "Djinn of the Bottle";
case 891: return "Tetravite";
case 892: return "Rukh";
case 893: return "Stangg Twin";
case 894: return "Mana Crypt";
case 895: return "Nalathni Dragon";
case 896: return "Sewers of Estark";
case 897: return "Windseeker Centaur";
case 898: return "Giant Badger";
case 899: return "Arena";
case 900: return "Spawn of Azar";
case 901: return "Damage";
case 902: return "Legacy";
case 903: return "Effect";
case 904: return "Draw Card";
case 905: return "Hunting";
case 906: return "Blank";
case 907: return "Blank";
case 908: return "Blank";
case 909: return "Blank";
case 910: return "Assembly Worker";
case 911: return "Blank";
case 912: return "Blank";
case 913: return "Blank";
case 914: return "Blank";
case 915: return "Blank";
case 916: return "Blank";
case 917: return "Blank";
case 918: return "Blank";
case 919: return "Blank";
case 920: return "Blank";
case 921: return "Blank";
case 922: return "Blank";
case 923: return "Blank";
case 924: return "Blank";
case 925: return "Blank";
case 926: return "Blank";
case 927: return "Blank";
case 928: return "Blank";
case 929: return "Blank";
case 930: return "Brass Man";
case 931: return "Dancing Scimitar";
case 932: return "Curse Artifact";
case 933: return "Electric Eel";
case 934: return "Festival";
case 935: return "Flood";
case 936: return "Goblin Digging Team";
case 937: return "Goblin Rock Sled";
case 938: return "Goblin Shrine";
case 939: return "Marsh Viper";
case 940: return "Merfolk Assassin";
case 941: return "Miracle Worker";
case 942: return "Pikemen";
case 943: return "Ragman";
case 944: return "Savaen Elves";
case 945: return "Scarwood Bandits";
case 946: return "Scarwood Goblins";
case 947: return "Scavenger Folk";
case 948: return "Squire";
case 949: return "Tangle Kelp";
case 950: return "Tivadar's Crusade";
case 951: return "Water Wurm";
case 952: return "Rubinia Soulsinger";
case 953: return "MPS Logo";
case 954: return "Blank";
case 955: return "Blank";
case 956: return "Blank";
case 957: return "Blank";
case 958: return "Blank";
case 959: return "Blank";
case 960: return "Blank";
case 961: return "Blank";
case 962: return "Blank";
case 963: return "Blank";
case 964: return "Blank";
case 965: return "Blank";
case 966: return "Blank";
case 967: return "Blank";
case 968: return "Blank";
case 969: return "Blank";
case 970: return "Blank";
case 971: return "Blank";
case 972: return "Blank";
case 973: return "Blank";
case 974: return "Blank";
case 975: return "Blank";
case 976: return "Blank";
case 977: return "Blank";
case 978: return "Blank";
case 979: return "Blank";
case 980: return "Crystal Ball";
case 981: return "Wizard of the Cost Logo";
case 982: return "Blank";
case 983: return "Blank";
case 984: return "Blank";
case 985: return "Blank";
case 986: return "Blank";
case 987: return "Blank";
case 988: return "Blank";
case 989: return "Blank";
case 990: return "Blank";
case 991: return "Blank";
case 992: return "Blank";
case 993: return "Blank";
case 994: return "Blank";
case 995: return "Blank";
case 996: return "Blank";
case 997: return "Blank";
case 998: return "Blank";
case 999: return "Blank";
    default: return "Unknown";
        }
      
    }
      
    public int nameToDuel(String inCard){
        return 007;
    }
    
    public String gameToName(String inCard){
        if (inCard.length() == 8) inCard = inCard.substring(0, 4);
        int inCardInt = Integer.parseInt(inCard, 16);
        switch (inCardInt){
                case 0: return "Swamp";
                case 1: return "Erhnam Djinn";
                case 256: return "Island";
                case 512: return "Forest";
                case 768: return "Mountain";
                case 1024: return "Plains";
                case 1280: return "Badlands";
                default : return "Not yet known";       
        }
    }
    
    public String nameToGame(String inCard){
        return "oot";
    }    
    
    public gameDeck getGameDeck() {
    //returns a deck from a Shandalar save
        try{
            gameDeck deck = new gameDeck();
            byte[] cardArray = new byte[4];
            byte cByte;
            int i = 0;
            String j, card = "";
            gameFile.seek(deckStart); 
            cByte = gameFile.readByte();
            j = Hex(cByte);
            while (!j.equals("FF")) {
                card = card.concat(j);
                cardArray[i] = cByte;
                cByte = gameFile.readByte();
                j = Hex(cByte);
                ++i;
                if (i==4){
                    deck.add(new gameCard(card, cardMap.gameToName(card)));
                    i=0;
                    card = "";
                }
            }
            deck.group();
            return deck;
        }catch(Exception e){
            System.out.println(e.getMessage());
            return null;
        }
 }
    
    public duelDeck getDuelDeck() {
    //returns the deck from a duel format deck
        try {
            duelDeck deck = new duelDeck();
            byte[] cardArray;
            byte cByte;
            int x = 0;
            int i;
            String j, id, name, temp, amount;
            while(x!=8){
            cByte = duelFile.readByte();
            j = Hex(cByte);
            if(j.equals("3B"))
                ++x;
            }
            duelFile.skipBytes(5);
            while(duelFile.getFilePointer() < duelFile.length()-2){ //until were at the end of the duelFile
            cardArray = new byte[10];
            i = 0;
            j = "";
            temp="";
            cByte = duelFile.readByte();
            //read id of card
            while (!j.equals("09")) {
                cardArray[i] = cByte;
                ++i;
                cByte = duelFile.readByte();
                j = Hex(cByte);
            }
            cardArray[i] = -1;
            j = "";
            i = 0;
            while(cardArray[i] != -1){
            id = String.valueOf(Integer.valueOf(Hex(cardArray[i]))-30);
            temp = temp.concat(id);
            ++i;
            }//
            id = temp;
            temp="";
            cardArray = new byte[10];
            i=0;
            //read amount of card
            cByte = duelFile.readByte();
            while (!j.equals("09")) {
                cardArray[i] = cByte;
                ++i;
                cByte = duelFile.readByte();
                j = Hex(cByte);
            }
            cardArray[i]=-1;
            j="";
            i=0;
            while(cardArray[i] != -1){
            amount = String.valueOf(Integer.valueOf(Hex(cardArray[i]))-30);
            temp = temp.concat(amount);
            ++i;
            }//
            amount = temp;
            temp="";
            cardArray = new byte[50];
            i=0;
            //read the card name
            cByte = duelFile.readByte();
            while (!j.equals("0D")) {
                cardArray[i]=cByte;
                ++i;
                cByte = duelFile.readByte();
                j = Hex(cByte);
            }
            name = new String(cardArray, "ascii");
            name =  name.trim();
            //
            deck.add(new duelCard(Integer.parseInt(id), Integer.parseInt(amount), name));
            duelFile.skipBytes(2);
            }//repeat
            return deck;
        } catch (Exception e) {
                 if (e.getClass() == java.lang.ArrayIndexOutOfBoundsException.class){
            JOptionPane.showMessageDialog(this, "Array out of bounds error." + nl +
                    "This is most commonly caused by comments in the deck file, remove them " +
                    "and it should work.");
            return null;
            }
            JOptionPane.showMessageDialog(this, e);
        }
        return null;
    }    
    
    public gameDeck duelToGame(duelDeck in){
        return in.convert(cardMap);
    }
    
    public void injectToGame(gameDeck in) {
        try {
            gameFile.seek(deckStart);
            for (gameCard c : in) {
                for(int i =1; i <= c.getQuantity();++i){
                String newCardString = c.getID();
                String newCardPart = newCardString.substring(0, 2);
                byte newCardByte = (byte) Integer.parseInt(newCardPart, 16);
                gameFile.write(newCardByte);
                newCardPart = newCardString.substring(2, 4);
                newCardByte = (byte) Integer.parseInt(newCardPart, 16);
                gameFile.write(newCardByte);
                gameFile.write(1);
                gameFile.write(0);
            }
            }
            gameFile = null;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }
    
    /**
     * Clears all the cards in a game deck
     */
    public void clearDeck(){
        try {
            gameFile.seek(deckStart);
            for (int i = 0; i < 500; ++i) {
                gameFile.writeByte(255);
                gameFile.writeByte(255);
                gameFile.writeByte(255);
                gameFile.writeByte(255);
            }
            gameFile.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    /**
    * @param args the command line arguments
    */

// To make this file open when the jar is run uncomment the below code
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnInject;
    private javax.swing.JButton btnLoop;
    private javax.swing.JButton btnReadAllFiles;
    private javax.swing.JButton btnReadDuel;
    private javax.swing.JButton btnReadGame;
    private javax.swing.JButton btnWriteToFiles;
    private javax.swing.JTextArea duelDeckBox;
    private javax.swing.JTextArea gameDeckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDuelName;
    private javax.swing.JLabel lblGameName;
    private javax.swing.JMenuItem menuOpenDuel;
    private javax.swing.JMenuItem menuOpenGame;
    private javax.swing.JMenu menuTitleFile1;
    private javax.swing.JLabel statusBar;
    private javax.swing.JTextField txtBaseCard;
    private javax.swing.JTextField txtIterations;
    // End of variables declaration//GEN-END:variables
}